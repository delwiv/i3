name: C CI

on:
  push:
    branches: [ next, master ]
  pull_request:
    branches: [ next ]

jobs:
  build:
    name: ubuntu-latest build
    strategy:
      fail-fast: false
      matrix:
        meson: [false, true]

    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
    - uses: actions/checkout@v2
    - run: git fetch --prune --unshallow
    - name: install & build deps
      run : |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends dpkg-dev devscripts git equivs build-essential clang
        sudo mk-build-deps --install --remove --tool 'apt-get --no-install-recommends -y' debian/control
    - name: autoreconf
      run: autoreconf -fi && mkdir build
      if: ${{ ! matrix.meson }}
    - name: configure
      run: ../configure
      working-directory: build
      if: ${{ ! matrix.meson }}
    - name: make
      run: make -j$(nproc) || (cat config.log && false)
      working-directory: build
      if: ${{ ! matrix.meson }}
    - name: meson
      run: |
        mkdir build
        cd build
        meson ..
      if: ${{ matrix.meson }}
    - name: ninja
      run: ninja
      working-directory: build
      if: ${{ matrix.meson }}
    - name: install test dependencies
      run: |
        sudo apt-get install -y cpanminus libanyevent-perl libdata-dump-perl libextutils-depends-perl libextutils-pkgconfig-perl libinline-c-perl libinline-perl libipc-run-perl libjson-xs-perl libmodule-install-perl libmouse-perl libmousex-nativetraits-perl libtest-deep-perl libtest-differences-perl libtest-exception-perl libtest-fatal-perl libtest-simple-perl libx11-xcb-perl libxcb-xtest0-dev libxml-parser-perl libxml-simple-perl libxml-tokeparser-perl perl x11-xserver-utils xauth xcb-proto xserver-xephyr xvfb
    - name: make check
      run: make check || testcases/complete-run.pl -p 1
      working-directory: build
      if: ${{ ! matrix.meson }}
    - name: ninja test
      run: ninja test
      working-directory: build
      if: ${{ matrix.meson }}

  dockerbuild:
    name: Docker Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: [base-386, base, base-ubuntu-386, base-ubuntu]
        compiler: [clang, gcc]
    env:
      CC: ${{ matrix.compiler }}
      # TODO: CFLAGS, under specific

    steps:
    - uses: actions/checkout@v2
    - run: git fetch --prune --unshallow
    - name: Run docker build
      run: docker build -t i3 . -f travis/travis-${{ matrix.dockerfile }}.Dockerfile
    - name: docker run autotools
      run: docker run -v $PWD:/usr/src/i3/ -w /usr/src/i3 -e CC i3 /bin/sh -c 'autoreconf -fi && mkdir -p build && cd build && (../configure || (cat config.log; false)) && make -j CFLAGS="-Wformat -Wformat-security -Wextra -Wno-unused-parameter -Wstrict-prototypes -Wmissing-prototypes -Werror -fno-common"'
    - name: docker run meson
      run: docker run -v $PWD:/usr/src/i3/ -w /usr/src/i3 -e CC i3 /bin/sh -c 'rm -rf build; mkdir -p build && cd build && CFLAGS="-Wformat -Wformat-security -Wextra -Wno-unused-parameter -Wstrict-prototypes -Wmissing-prototypes -Werror -fno-common" meson .. -Ddocs=true -Dmans=true -Db_sanitize=address && ninja -v'
